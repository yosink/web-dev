version: '3'

services:
  nginx:
    build:
     context: ./nginx
     dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./websites:/var/www
      - ./nginx/logs:/var/log/nginx
      - ./nginx/sites:/etc/nginx/sites-available
    depends_on:
      - php7
      - php5
    networks: 
      - frontend
      - backend
  
  php7:
    build:
      context: ./php72
      dockerfile: Dockerfile
    volumes:
     - ./websites:/var/www
     - ./php72/debug_log:/var/log/xdebug
    ports:
      - "9099:9099"
    networks: 
      - backend

  php5:
    build:
      context: ./php5
      dockerfile: Dockerfile
    volumes:
     - ./websites:/var/www
    networks: 
      - backend

  rabbit:
    build: 
      context: ./rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672"
      - "15672:15672"

  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    environment:
        - MYSQL_ROOT_PASSWORD=root
        - TZ=Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql

  beanstalkd:
    build:
      context: ./beanstalkd
      dockerfile: Dockerfile
    ports:
      - "11300:11300"

  beanstalkd-console:
    build:
      context: ./beanstalkd_console
      dockerfile: Dockerfile
    ports:
      - "6080:2080"
    depends_on:
        - beanstalkd

# use "docker volume create --name=postgresdb" instead of direct mount volumes
# don't forget add top-level volumes "postgresdb"
  # postgres:
  #   build:
  #     context: ./postgres
  #     dockerfile: Dockerfile
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - PGD​​ATA=/tmp
  #   volumes:
  #     - postgresdb:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   networks: 
  #     - backend

  redis:
    image: redis:5
    ports:
      - "6379:6379"

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.1
    container_name: es01
    environment:
      - node.name=es01
      - discovery.seed_hosts=es02
      - cluster.initial_master_nodes=es01,es02
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - esnet

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.1
    container_name: es02
    environment:
      - node.name=es02
      - discovery.seed_hosts=es01
      - cluster.initial_master_nodes=es01,es02
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./esdata2:/usr/share/elasticsearch/data
    networks:
      - esnet

  kibana:
    image: docker.elastic.co/kibana/kibana:7.3.1
    environment:
      SERVER_NAME: kibana.me
      ELASTICSEARCH_HOSTS: http://es01:9200
    ports:
      - "5601:5601"
    networks:
      - esnet

networks: 
  frontend:
  backend:
  esnet:

# volumes:
#   postgresdb:
#     external: true
